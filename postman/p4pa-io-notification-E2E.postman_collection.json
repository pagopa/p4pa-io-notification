{
	"info": {
		"_postman_id": "6dc00217-dd3f-45ff-b585-e07e3d4edc81",
		"name": "IONotification E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21721488",
		"_collection_link": "https://universal-meadow-88424.postman.co/workspace/PAP4~e3834aae-c5da-4699-87c8-55cd8293d10e/collection/21721488-6dc00217-dd3f-45ff-b585-e07e3d4edc81?action=share&source=collection_link&creator=21721488"
	},
	"item": [
		{
			"name": "00_login",
			"item": [
				{
					"name": "00_authtoken jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"p4paAuth - 01_authtoken - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"p4paAuth - 01_authtoken jwt - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"access_token\")\r",
									"    pm.expect(jsonResponse).have.property(\"token_type\")\r",
									"    pm.expect(jsonResponse).have.property(\"expires_in\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"accessToken\", jsonResponse.access_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{p4paAuthBaseUrl}}/auth/token?client_id=piattaforma-unitaria&grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token={{tokenExchange_subjectToken}}&subject_issuer={{tokenExchange_issuer}}&scope=openid&subject_token_type=urn:ietf:params:oauth:token-type:jwt",
							"host": [
								"{{p4paAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "piattaforma-unitaria"
								},
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:token-exchange"
								},
								{
									"key": "subject_token",
									"value": "{{tokenExchange_subjectToken}}"
								},
								{
									"key": "subject_issuer",
									"value": "{{tokenExchange_issuer}}"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "subject_token_type",
									"value": "urn:ietf:params:oauth:token-type:jwt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01_sendMessage",
			"item": [
				{
					"name": "SendMessage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"serviceId\", `01J1F178BDBCGWE8HEN13WMK6N`);\r",
									"pm.collectionVariables.set(\"fiscalCode\", `AAAAAA69A45A602A`);\r",
									"pm.collectionVariables.set(\"orgId\", `56`);\r",
									"pm.collectionVariables.set(\"debtPositionTypeOrgId\", `318`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - sendMessage - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*pm.test(\"IONotification - sendMessage - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"notificationId\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"notificationId\", jsonResponse.workflowId);*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"serviceId\": \"{{serviceId}}\",\r\n  \"fiscalCode\": \"{{fiscalCode}}\",\r\n  \"orgId\": {{orgId}},\r\n  \"debtPositionTypeOrgId\": {{debtPositionTypeOrgId}},\r\n  \"subject\": \"Pay your debts\",\r\n  \"markdown\": \"La informiamo che Ã¨ stata generata una nuova posizione debitoria a suo carico.  Causale %causaleVersamento%. La invitiamo a effettuare il pagamento con codice identificativo unico %codIUV% per un totale di %importoDovuto% euro entro la data di scadenza %dataEsecuzionePagamento% per evitare eventuali sanzioni o interessi di mora.\",\r\n  \"operationType\": \"CREATE_DP\",\r\n  \"dueDate\": \"28/02/2025\",\r\n  \"amount\": \"100\",\r\n  \"iuv\": \"test_iuv\",\r\n  \"paymentReason\": \"test_paymentReason\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ioNotificationBaseUrl}}/ionotification/message",
							"host": [
								"{{ioNotificationBaseUrl}}"
							],
							"path": [
								"ionotification",
								"message"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"function generateRandomNumber() {\r",
							"    let randomNumber = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
							"    }\r",
							"    return randomNumber;\r",
							"}\r",
							"\r",
							"if (!pm.collectionVariables.get(\"randomNumber\")) {\r",
							"    let randomNumber = generateRandomNumber();\r",
							"    pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
							"    pm.collectionVariables.set(\"name\", `test_service_${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"organization_name\", `test_ente_${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"department_name\", `test_department_ente_${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"enteId\", `${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"tipoDovutoId\", `${randomNumber}`);\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// START COMMON UTILITIES",
					"",
					"// global variable to use in order to skip tests",
					"skipTests=false;",
					"",
					"// method to be invoked as first thing inside tests in order to instrument the \"pm\" variable:",
					"// eg: pm = pm=instrumentPmMethod(pm);",
					"instrumentPmMethod = (pm) => {",
					"    const pmProxy = {",
					"        get: function(pm, key) {",
					"            if (key == 'test') {",
					"                return (skipTests ? pm.test.skip : pm.test);",
					"            }",
					"            return pm[key];",
					"        }",
					"    };",
					"",
					"    return new Proxy(pm, pmProxy);",
					"}",
					"",
					"// function to be used in order to retry the current request, configuring a maximum number of attempts and a fixed delay between each invoke",
					"retryRequest = (pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {",
					"    if(!pm || !setTimeout){",
					"        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: pm=\" + pm + \", setTimeout=\" + setTimeout)",
					"    }",
					"",
					"    const retryVariableName = \"retry_\" + pm.info.requestId",
					"    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;",
					"    if(attempt < maxAttempts) {",
					"        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");",
					"        pm.variables.set(retryVariableName, attempt)",
					"        pm.execution.setNextRequest(pm.info.requestId);",
					"        return setTimeout(()=>{}, waitingMillis);",
					"    } else {",
					"        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));",
					"    }",
					"}",
					"",
					"// function to be used in order to retry the current request until it returns a known response HTTP status code",
					"retryWhenStatusCode = (pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {",
					"    if(pm.response.code == statusCode){",
					"        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")",
					"        skipTests=true;",
					"        return retryRequest(pm, setTimeout, waitingMillis, maxAttempts)",
					"    }",
					"}",
					"",
					"// XML utilities",
					"xml2js = require('xml2js');",
					"",
					"parseXmlResponse = (response) => {",
					"    let body;",
					"    xml2js.parseString(response.text(), {",
					"            ignoreAttrs: true, ",
					"            explicitArray: false,",
					"        }, function (err, result) {",
					"            if(err){",
					"                console.error(err)",
					"            }",
					"        body = result;",
					"    });",
					"    return body;",
					"};"
				]
			}
		}
	],
	"variable": [
		{
			"key": "fiscalCode",
			"value": ""
		},
		{
			"key": "serviceId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "orgId",
			"value": ""
		},
		{
			"key": "debtPositionTypeOrgId",
			"value": ""
		},
		{
			"key": "notificationId",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "organization_name",
			"value": ""
		},
		{
			"key": "department_name",
			"value": ""
		},
		{
			"key": "enteId",
			"value": ""
		},
		{
			"key": "tipoDovutoId",
			"value": ""
		}
	]
}