{
	"info": {
		"_postman_id": "ebe4196a-8e19-48c0-964e-c8c728b6f816",
		"name": "IONotification E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15747968",
		"_collection_link": "https://warped-astronaut-141685.postman.co/workspace/P4PA~9a8b7dd5-97b6-4dd0-b3f5-95f25fd0b455/collection/15747968-ebe4196a-8e19-48c0-964e-c8c728b6f816?action=share&source=collection_link&creator=15747968"
	},
	"item": [
		{
			"name": "00_login",
			"item": [
				{
					"name": "00_authtoken jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"p4paAuth - 01_authtoken - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"p4paAuth - 01_authtoken jwt - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"accessToken\")\r",
									"    pm.expect(jsonResponse).have.property(\"tokenType\")\r",
									"    pm.expect(jsonResponse).have.property(\"expiresIn\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"accessToken\", jsonResponse.accessToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{p4paAuthBaseUrl}}/payhub/auth/token?client_id=piattaforma-unitaria&grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token={{tokenExchange_subjectToken}}&subject_issuer={{tokenExchange_issuer}}&scope=openid&subject_token_type=urn:ietf:params:oauth:token-type:jwt",
							"host": [
								"{{p4paAuthBaseUrl}}"
							],
							"path": [
								"payhub",
								"auth",
								"token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "piattaforma-unitaria"
								},
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:token-exchange"
								},
								{
									"key": "subject_token",
									"value": "{{tokenExchange_subjectToken}}"
								},
								{
									"key": "subject_issuer",
									"value": "{{tokenExchange_issuer}}"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "subject_token_type",
									"value": "urn:ietf:params:oauth:token-type:jwt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Service Happy Case",
			"item": [
				{
					"name": "CreateService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - createService - Responses with 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    let randomNumber = '';\r",
									"    for (let i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"let randomNumber = generateRandomNumber();\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
									"pm.collectionVariables.set(\"name\", `test_service_${randomNumber}`);\r",
									"pm.collectionVariables.set(\"organization_name\", `test_ente_${randomNumber}`);\r",
									"pm.collectionVariables.set(\"department_name\", `test_department_ente_${randomNumber}`);\r",
									"\r",
									"pm.collectionVariables.set(\"enteId\", `${randomNumber}`);\r",
									"pm.collectionVariables.set(\"tipoDovutoId\", `${randomNumber}`);\r",
									"pm.collectionVariables.set(\"fiscalCode\", `AAAAAA69A45A602A`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"metadata\": {\r\n    \"web_url\": \"https://www.google.com.br/webhp?hl=pt&gl=br\",\r\n    \"app_ios\": \"appio\",\r\n    \"app_android\": \"appand\",\r\n    \"tos_url\": \"web\",\r\n    \"privacy_url\": \"https://www.google.com.br/webhp?hl=pt&gl=br\",\r\n    \"address\": \"via del test\",\r\n    \"phone\": \"PHONE\",\r\n    \"email\": \"EMAIL\",\r\n    \"pec\": \"PEC\",\r\n    \"cta\": \"CTA\",\r\n    \"token_name\": \"TOKEN\",\r\n    \"support_url\": \"https://www.google.com.br/webhp?hl=pt&gl=br\",\r\n    \"scope\": \"LOCAL\",\r\n    \"topic_id\": 0\r\n  },\r\n  \"name\": \"{{name}}\",\r\n  \"description\": \"app\",\r\n  \"organization\": {\r\n    \"name\": \"{{organization_name}}\",\r\n    \"fiscal_code\": {{fiscalCode_ente}},\r\n    \"department_name\": \"{{department_name}}\"\r\n  },\r\n  \"require_secure_channel\": false,\r\n  \"authorized_recipients\": [\r\n    \"{{fiscalCode}}\"\r\n  ],\r\n  \"authorized_cidrs\": [],\r\n  \"max_allowed_payment_amount\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService IONotification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"IONotification - getService - Happy case - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status should be CREATED\", function () {\r",
									"        pm.expect(response.status).to.eql(\"CREATED\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"serviceId\", response.serviceId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SendMessage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - sendMessage - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fiscalCode\": \"{{fiscalCode}}\",\r\n  \"enteId\": {{enteId}},\r\n  \"tipoDovutoId\": {{tipoDovutoId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/message",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"message"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - DeleteService - Happy case: Delete Service From IO - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{serviceId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"let enteId = pm.collectionVariables.get(\"enteId\");\r",
									"let tipoDovutoId = pm.collectionVariables.get(\"tipoDovutoId\");\r",
									"\r",
									"pm.test(\"IONotification - getService - Unhappy case - Responses with 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Service not found\", function () {\r",
									"        pm.expect(response.message).to.eql(\"The service for \"+tipoDovutoId+\" associated with \"+enteId+\" does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteNotifica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"IONotification - DeleteNotification - Happy case: Delete Service From IO - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() =>{}, 10000);\r",
									"\r",
									"pm.collectionVariables.set(\"userId\", `IBNlZcXUQlEvAx3i3tgEKS5NaEhpz3GKJ7b6EM61a6Q=`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/message/{{userId}}/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"message",
								"{{userId}}",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"function generateRandomNumber() {\r",
							"    let randomNumber = '';\r",
							"    for (let i = 0; i < 10; i++) {\r",
							"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
							"    }\r",
							"    return randomNumber;\r",
							"}\r",
							"\r",
							"if (!pm.collectionVariables.get(\"randomNumber\")) {\r",
							"    let randomNumber = generateRandomNumber();\r",
							"    pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
							"    pm.collectionVariables.set(\"name\", `test_service_${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"organization_name\", `test_ente_${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"department_name\", `test_department_ente_${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"enteId\", `${randomNumber}`);\r",
							"    pm.collectionVariables.set(\"tipoDovutoId\", `${randomNumber}`);\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create Service Retry NotFound IO",
			"item": [
				{
					"name": "CreateService Wrong Payload 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - createService - Unhappy case: Wrong Payload - Responses with 403\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"IONotification - Unhappy case: Wrong Payload\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.code).to.eql(\"IO_NOTIFICATION_WRONG_PAYLOAD\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomNumber() {\r",
									"    let randomNumber = '';\r",
									"    for (let i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"let randomNumber = generateRandomNumber();\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
									"pm.collectionVariables.set(\"name\", `test_service_${randomNumber}`);\r",
									"pm.collectionVariables.set(\"organization_name\", `test_ente_${randomNumber}`);\r",
									"pm.collectionVariables.set(\"department_name\", `test_department_ente_${randomNumber}`);\r",
									"\r",
									"pm.collectionVariables.set(\"enteId\", `${randomNumber}`);\r",
									"pm.collectionVariables.set(\"tipoDovutoId\", `${randomNumber}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"metadata\": {\r\n  },\r\n  \"name\": \"{{name}}\",\r\n  \"description\": \"app\",\r\n  \"organization\": {\r\n    \"name\": \"{{organization_name}}\",\r\n    \"fiscal_code\": {{fiscalCode_ente}},\r\n    \"department_name\": \"{{department_name}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService IONotification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"IONotification - getService - Happy case - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status should be REQUESTED\", function () {\r",
									"        pm.expect(response.status).to.eql(\"REQUESTED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateService NotFoundIO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - createService - Second Try Corrected Payload- Responses with 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"metadata\": {\r\n    \"web_url\": \"https://www.google.com.br/webhp?hl=pt&gl=br\",\r\n    \"app_ios\": \"appio\",\r\n    \"app_android\": \"appand\",\r\n    \"tos_url\": \"web\",\r\n    \"privacy_url\": \"https://www.google.com.br/webhp?hl=pt&gl=br\",\r\n    \"address\": \"via del test\",\r\n    \"phone\": \"PHONE\",\r\n    \"email\": \"EMAIL\",\r\n    \"pec\": \"PEC\",\r\n    \"cta\": \"CTA\",\r\n    \"token_name\": \"TOKEN\",\r\n    \"support_url\": \"https://www.google.com.br/webhp?hl=pt&gl=br\",\r\n    \"scope\": \"LOCAL\",\r\n    \"topic_id\": 0\r\n  },\r\n  \"name\": \"{{name}}\",\r\n  \"description\": \"app\",\r\n  \"organization\": {\r\n    \"name\": \"{{organization_name}}\",\r\n    \"fiscal_code\": {{fiscalCode_ente}},\r\n    \"department_name\": \"{{department_name}}\"\r\n  },\r\n  \"require_secure_channel\": false,\r\n  \"authorized_recipients\": [],\r\n  \"authorized_cidrs\": [],\r\n  \"max_allowed_payment_amount\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService IONotification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test(\"IONotification - getService - Happy case - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status should be CREATED\", function () {\r",
									"        pm.expect(response.status).to.eql(\"CREATED\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"serviceId\", response.serviceId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IONotification - DeleteService - Happy case: Delete Service From IO - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{serviceId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService IONotification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"let enteId = pm.collectionVariables.get(\"enteId\");\r",
									"let tipoDovutoId = pm.collectionVariables.get(\"tipoDovutoId\");\r",
									"\r",
									"pm.test(\"IONotification - getService - Unhappy case - Responses with 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Service not found\", function () {\r",
									"        pm.expect(response.message).to.eql(\"The service for \"+tipoDovutoId+\" associated with \"+enteId+\" does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlNotification}}/ionotification/service/{{enteId}}/{{tipoDovutoId}}",
							"host": [
								"{{baseUrlNotification}}"
							],
							"path": [
								"ionotification",
								"service",
								"{{enteId}}",
								"{{tipoDovutoId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{accessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// START COMMON UTILITIES",
					"",
					"// global variable to use in order to skip tests",
					"skipTests=false;",
					"",
					"// method to be invoked as first thing inside tests in order to instrument the \"pm\" variable:",
					"// eg: pm = pm=instrumentPmMethod(pm);",
					"instrumentPmMethod = (pm) => {",
					"    const pmProxy = {",
					"        get: function(pm, key) {",
					"            if (key == 'test') {",
					"                return (skipTests ? pm.test.skip : pm.test);",
					"            }",
					"            return pm[key];",
					"        }",
					"    };",
					"",
					"    return new Proxy(pm, pmProxy);",
					"}",
					"",
					"// function to be used in order to retry the current request, configuring a maximum number of attempts and a fixed delay between each invoke",
					"retryRequest = (pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {",
					"    if(!pm || !setTimeout){",
					"        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: pm=\" + pm + \", setTimeout=\" + setTimeout)",
					"    }",
					"",
					"    const retryVariableName = \"retry_\" + pm.info.requestId",
					"    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;",
					"    if(attempt < maxAttempts) {",
					"        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");",
					"        pm.variables.set(retryVariableName, attempt)",
					"        pm.execution.setNextRequest(pm.info.requestId);",
					"        return setTimeout(()=>{}, waitingMillis);",
					"    } else {",
					"        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));",
					"    }",
					"}",
					"",
					"// function to be used in order to retry the current request until it returns a known response HTTP status code",
					"retryWhenStatusCode = (pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {",
					"    if(pm.response.code == statusCode){",
					"        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")",
					"        skipTests=true;",
					"        return retryRequest(pm, setTimeout, waitingMillis, maxAttempts)",
					"    }",
					"}",
					"",
					"// XML utilities",
					"xml2js = require('xml2js');",
					"",
					"parseXmlResponse = (response) => {",
					"    let body;",
					"    xml2js.parseString(response.text(), {",
					"            ignoreAttrs: true, ",
					"            explicitArray: false,",
					"        }, function (err, result) {",
					"            if(err){",
					"                console.error(err)",
					"            }",
					"        body = result;",
					"    });",
					"    return body;",
					"};"
				]
			}
		}
	],
	"variable": [
		{
			"key": "ente_test_ko",
			"value": "0",
			"type": "string"
		},
		{
			"key": "tipoDovuto_test_ko",
			"value": "0",
			"type": "string"
		},
		{
			"key": "serviceId_fake",
			"value": "SERVICEIDFAKE123"
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "organization_name",
			"value": ""
		},
		{
			"key": "department_name",
			"value": ""
		},
		{
			"key": "fiscalCode_ente",
			"value": "99999999982",
			"type": "string"
		},
		{
			"key": "enteId",
			"value": ""
		},
		{
			"key": "tipoDovutoId",
			"value": ""
		},
		{
			"key": "fiscalCode",
			"value": ""
		},
		{
			"key": "serviceId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		}
	]
}